{"version":3,"sources":["photo/a.jpg","photo/b.jpg","photo/c.jpg","photo/d.jpg","photo/e.jpg","composante/Photo.jsx","LanguageContext.js","composante/About.jsx","composante/Cas.jsx","App.js","serviceWorker.js","index.js"],"names":["Photo","listPhoto","a","b","c","d","e","useState","compteur","setCompteur","className","src","alt","onClick","LanguageContext","createContext","About","language","useContext","Francais","Anglais","Cas","props","date","totalCas","totalDeces","App","langueProtection","setLangueProtection","langueCas","setLangueCas","langueInfo","setLangueInfo","setLanguage","cas","setCas","image","setImage","about","setAbout","undefined","setTotalCas","setTotalDeces","time","setTime","useEffect","fetch","apiCasURL","then","reponse","json","resultat","data","total","console","log","apiDecesURL","catch","alert","setDidFetch","didFetch","Provider","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.7128f88b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/a.0659f974.jpg\";","export default __webpack_public_path__ + \"static/media/b.d1fb59b8.jpg\";","export default __webpack_public_path__ + \"static/media/c.05b346b7.jpg\";","export default __webpack_public_path__ + \"static/media/d.0a9d6d8f.jpg\";","export default __webpack_public_path__ + \"static/media/e.65dd936f.jpg\";","import React, { useState} from 'react'\nimport a from '../photo/a.jpg'\nimport b from '../photo/b.jpg'\nimport c from '../photo/c.jpg'\nimport d from '../photo/d.jpg'\nimport e from '../photo/e.jpg'\n//import f from '../photo/f.jpg'\nimport './Photo.css'\nimport { FaChevronRight, FaChevronLeft } from 'react-icons/fa';\n\n\n\n\nconst Photo = () => {\n\n    const listPhoto = [a, b, c, d, e] //ajouter f\n    const [compteur, setCompteur] = useState(0)\n    const droite = () => {\n        if (compteur === 4) { //ajouter 5      \n            setCompteur(0)\n\n        } else {\n            setCompteur(compteur + 1)\n        }\n    }\n    const gauche = () => {\n        if (compteur === 0) {\n            setCompteur(4) //ajouter 5\n        } else {\n            setCompteur(compteur - 1)\n        }\n    }\n\n    return (\n        <div>\n            <div className='image'>\n                <img className='images' src={listPhoto[compteur]} alt='OOPS, not working!' />\n            </div>\n            <div className='lesButtons'>\n                <FaChevronLeft className='chevron' onClick={gauche} />\n                <FaChevronRight className='chevron' onClick={droite} />\n            </div>\n        </div>\n\n    )\n}\n\nexport default Photo\n","import {createContext} from 'react'\nexport const LanguageContext = createContext(null)\n","import React,{useContext} from 'react'\nimport {LanguageContext} from '../LanguageContext'\n\n\nconst About = () => {\n    const language = useContext(LanguageContext)\n    const Francais = () =>{\n    \n        return(\n        <div>\n        <h1>\n            Information Sur Cette Application\n        </h1>\n        <h2><u>Version de l'application</u></h2>\n        1.0\n        <h2>_____________________</h2>\n        <h2><u>langage de programmation</u></h2>\n        Cette application est codée dans le \n        langage de programmation \"react.js\"\n        </div>\n    )}\n    \n    const Anglais = () =>{\n        return(\n            <div>\n            <h1>\n            About This App\n        </h1>\n        <h2><u>App version</u></h2>\n        <h4>1.0</h4>\n        <h2>_____________________</h2>\n        <h2><u>programming language</u></h2>\n        <h4>This application is coded in \n        the \"react.js\" programming language</h4>\n            </div>\n        )}\n        \n    return (\n        <div>\n        {language === 'fr' ? <Francais/>:<Anglais/>}\n        </div>\n    )\n}\n\nexport default About\n\n","import React, { useContext } from 'react'\n\nimport { LanguageContext } from '../LanguageContext'\n\n\nconst Cas = (props) => {\n\n    const language = useContext(LanguageContext)\n\n    const Francais = () => {\n        return (\n            <div>\n                <h1>Cas au Quebec</h1>\n                <h2>Dernière mise à jour de la situation au Québec: {props.date}</h2>\n                <h2>Total de Cas: {props.totalCas}</h2>\n                <h2>Total de Deces: {props.totalDeces}</h2>\n\n            </div>\n        )\n    }\n    const Anglais = () => {\n        return (\n            <div>\n                <h1>Cases in Quebec</h1>\n                <h2>Last Update of the situation in Quebec: {props.date}</h2>\n                <h2>Total Cases: {props.totalCas}</h2>\n                <h2>Total Deaths: {props.totalDeces}</h2>\n\n            </div>\n        )\n    }\n    return (\n        <div>\n\n            {language === 'fr' ? <Francais /> : <Anglais />}\n        </div>\n    )\n}\n\n\n\n\nexport default Cas","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Photo from './composante/Photo';\nimport About from './composante/About'\nimport Cas from './composante/Cas'\nimport { LanguageContext } from './LanguageContext'\n\n\nfunction App() {\n\n  const [langueProtection, setLangueProtection] = useState(\"Éviter l'infection\")\n  const [langueCas, setLangueCas] = useState('Statistiques')\n  const [langueInfo, setLangueInfo] = useState('Information')\n  const [language, setLanguage] = useState('fr')\n\n  // Etat pour savoir si OUI/NON on montre les cas/image/about\n  const [cas, setCas] = useState(false)\n  const [image, setImage] = useState(true)\n  const [about, setAbout] = useState(false)\n  \n  // Les donnes a montrer\n  const [totalCas, setTotalCas] = useState(undefined)\n  const [totalDeces, setTotalDeces] = useState(undefined)\n\n  const [time, setTime] = useState('')\n\n  const englishHandler = () => {\n    setLanguage('en')\n    setLangueProtection('Avoid Infection')\n    setLangueCas('Stats')\n    setLangueInfo('About')\n  }\n\n  const frenchHandler = () => {\n    setLanguage('fr')\n    setLangueProtection(\"Éviter l'infection\")\n    setLangueCas('Statistiques')\n    setLangueInfo('Information')\n  }\n\n  // Les fronctions qui ouvrent/ferment les pages\n  const aboutHandler = () => {\n    setImage(false)\n    setCas(false)\n    setAbout(true)\n  }\n  const imageHandler = () => {\n    setAbout(false)\n    setCas(false)\n    setImage(true)\n  }\n  const casHandler = () => {\n    setAbout(false)\n    setImage(false)\n    setCas(true)\n\n  }\n\n  // Fonction qui s'execute quand la page load la premiere fois\n  useEffect(() => {\n    // On fetch le total de cas\n    fetch(apiCasURL)\n      .then(reponse => reponse.json())\n      .then(resultat => {\n        setTime(resultat.data[0].date)\n        setTotalCas(resultat.total)\n        console.log(resultat)\n      })\n\n    // On fetch le total de deces\n    fetch(apiDecesURL)\n      .then(reponse => reponse.json())\n      .then(resultat => {\n        setTotalDeces(resultat.total)\n        console.log(resultat)\n      })\n      .catch(() => {\n        alert('Error!!')\n      })\n      setDidFetch(true)\n  }, [])\n\n  console.log(time)\n  const apiCasURL = \"https://api.covid19tracker.ca/cases?province=QC&per_page=&order\"\n  const apiDecesURL = \"https://api.covid19tracker.ca/fatalities?province=QC&per_page=&order\"\n\n\n  // Etat qui verifie si on a bien fetch AVANT d'ouvrir la page web\n  const [didFetch, setDidFetch] = useState(false)\n\n  return (\n    <LanguageContext.Provider value={language}>\n        {didFetch ? (<div className=\"App\">\n          <div className=\"composante\">\n            {image ? <Photo /> : null}\n            {about ? <About /> : null}\n            {cas ? <Cas totalCas={totalCas} totalDeces={totalDeces} date={time}/> : null} {/* A MONTRER A EMILY */}\n          </div>\n          <div className='buttons'>\n            <div className=\"conrad\">\n              <button className=\"bouts\" onClick={imageHandler}>{langueProtection}</button>\n              <button className=\"bouts\" onClick={casHandler}>{langueCas}</button>\n              <button className=\"bouts\" onClick={aboutHandler}>{langueInfo}</button>\n            </div>\n            <button onClick={frenchHandler}>Francais</button>\n            <button onClick={englishHandler}>English</button>\n          </div>\n\n        </div>) : <h1>Loading...</h1>}\n    </LanguageContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}