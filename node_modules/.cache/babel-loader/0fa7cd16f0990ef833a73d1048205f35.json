{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/emily/Desktop/AvoidInfectionUpdate/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Photo from './composante/Photo';\nimport About from './composante/About';\nimport Cas from './composante/Cas';\nimport { LanguageContext } from './LanguageContext';\n\nfunction App() {\n  _s();\n\n  const [langueProtection, setLangueProtection] = useState(\"Éviter l'infection\");\n  const [langueCas, setLangueCas] = useState('Statistiques');\n  const [langueInfo, setLangueInfo] = useState('Information');\n  const [language, setLanguage] = useState('fr'); // Etat pour savoir si OUI/NON on montre les cas/image/about\n\n  const [cas, setCas] = useState(false);\n  const [image, setImage] = useState(true);\n  const [about, setAbout] = useState(false); // Les donnes a montrer\n\n  const [totalCas, setTotalCas] = useState(undefined);\n  const [totalDeces, setTotalDeces] = useState(undefined);\n  const [time, setTime] = useState('');\n\n  const englishHandler = () => {\n    setLanguage('en');\n    setLangueProtection('Avoid Infection');\n    setLangueCas('Stats');\n    setLangueInfo('About');\n  };\n\n  const frenchHandler = () => {\n    setLanguage('fr');\n    setLangueProtection(\"Éviter l'infection\");\n    setLangueCas('Statistiques');\n    setLangueInfo('Information');\n  }; // Les fronctions qui ouvrent/ferment les pages\n\n\n  const aboutHandler = () => {\n    setImage(false);\n    setCas(false);\n    setAbout(true);\n  };\n\n  const imageHandler = () => {\n    setAbout(false);\n    setCas(false);\n    setImage(true);\n  };\n\n  const casHandler = () => {\n    setAbout(false);\n    setImage(false);\n    setCas(true);\n  }; // Fonction qui s'execute quand la page load la premiere fois\n\n\n  useEffect(() => {\n    // On fetch le total de cas\n    fetch(apiCasURL).then(reponse => reponse.json()).then(resultat => {\n      setTime(resultat.data[0].date);\n      setTotalCas(resultat.total);\n      console.log(resultat);\n    }); // On fetch le total de deces\n\n    fetch(apiDecesURL).then(reponse => reponse.json()).then(resultat => {\n      setTotalDeces(resultat.total);\n      console.log(resultat);\n    }).catch(() => {\n      alert('Error!!');\n    });\n    setDidFetch(true);\n  }, []);\n  console.log(time);\n  const apiCasURL = \"https://api.covid19tracker.ca/cases?province=QC&per_page=&order\";\n  const apiDecesURL = \"https://api.covid19tracker.ca/fatalities?province=QC&per_page=&order\"; // Etat qui verifie si on a bien fetch AVANT d'ouvrir la page web\n\n  const [didFetch, setDidFetch] = useState(false);\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: language,\n    children: didFetch ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"composante\",\n        children: [image ? /*#__PURE__*/_jsxDEV(Photo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 22\n        }, this) : null, about ? /*#__PURE__*/_jsxDEV(About, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 22\n        }, this) : null, cas ? /*#__PURE__*/_jsxDEV(Cas, {\n          totalCas: totalCas,\n          totalDeces: totalDeces,\n          date: time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 20\n        }, this) : null, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"conrad\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bouts\",\n            onClick: imageHandler,\n            children: langueProtection\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bouts\",\n            onClick: casHandler,\n            children: langueCas\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"bouts\",\n            onClick: aboutHandler,\n            children: langueInfo\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: frenchHandler,\n          children: \"Francais\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: englishHandler,\n          children: \"English\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 22\n    }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 19\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"8ikP9TKvrdlprx6bHZj6sGsYT9c=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/emily/Desktop/AvoidInfectionUpdate/src/App.js"],"names":["React","useState","useEffect","Photo","About","Cas","LanguageContext","App","langueProtection","setLangueProtection","langueCas","setLangueCas","langueInfo","setLangueInfo","language","setLanguage","cas","setCas","image","setImage","about","setAbout","totalCas","setTotalCas","undefined","totalDeces","setTotalDeces","time","setTime","englishHandler","frenchHandler","aboutHandler","imageHandler","casHandler","fetch","apiCasURL","then","reponse","json","resultat","data","date","total","console","log","apiDecesURL","catch","alert","setDidFetch","didFetch"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Photo from './composante/Photo';\nimport About from './composante/About'\nimport Cas from './composante/Cas'\nimport { LanguageContext } from './LanguageContext'\n\n\nfunction App() {\n\n  const [langueProtection, setLangueProtection] = useState(\"Éviter l'infection\")\n  const [langueCas, setLangueCas] = useState('Statistiques')\n  const [langueInfo, setLangueInfo] = useState('Information')\n  const [language, setLanguage] = useState('fr')\n\n  // Etat pour savoir si OUI/NON on montre les cas/image/about\n  const [cas, setCas] = useState(false)\n  const [image, setImage] = useState(true)\n  const [about, setAbout] = useState(false)\n  \n  // Les donnes a montrer\n  const [totalCas, setTotalCas] = useState(undefined)\n  const [totalDeces, setTotalDeces] = useState(undefined)\n\n  const [time, setTime] = useState('')\n\n  const englishHandler = () => {\n    setLanguage('en')\n    setLangueProtection('Avoid Infection')\n    setLangueCas('Stats')\n    setLangueInfo('About')\n  }\n\n  const frenchHandler = () => {\n    setLanguage('fr')\n    setLangueProtection(\"Éviter l'infection\")\n    setLangueCas('Statistiques')\n    setLangueInfo('Information')\n  }\n\n  // Les fronctions qui ouvrent/ferment les pages\n  const aboutHandler = () => {\n    setImage(false)\n    setCas(false)\n    setAbout(true)\n  }\n  const imageHandler = () => {\n    setAbout(false)\n    setCas(false)\n    setImage(true)\n  }\n  const casHandler = () => {\n    setAbout(false)\n    setImage(false)\n    setCas(true)\n\n  }\n\n  // Fonction qui s'execute quand la page load la premiere fois\n  useEffect(() => {\n    // On fetch le total de cas\n    fetch(apiCasURL)\n      .then(reponse => reponse.json())\n      .then(resultat => {\n        setTime(resultat.data[0].date)\n        setTotalCas(resultat.total)\n        console.log(resultat)\n      })\n\n    // On fetch le total de deces\n    fetch(apiDecesURL)\n      .then(reponse => reponse.json())\n      .then(resultat => {\n        setTotalDeces(resultat.total)\n        console.log(resultat)\n      })\n      .catch(() => {\n        alert('Error!!')\n      })\n      setDidFetch(true)\n  }, [])\n\n  console.log(time)\n  const apiCasURL = \"https://api.covid19tracker.ca/cases?province=QC&per_page=&order\"\n  const apiDecesURL = \"https://api.covid19tracker.ca/fatalities?province=QC&per_page=&order\"\n\n\n  // Etat qui verifie si on a bien fetch AVANT d'ouvrir la page web\n  const [didFetch, setDidFetch] = useState(false)\n\n  return (\n    <LanguageContext.Provider value={language}>\n        {didFetch ? (<div className=\"App\">\n          <div className=\"composante\">\n            {image ? <Photo /> : null}\n            {about ? <About /> : null}\n            {cas ? <Cas totalCas={totalCas} totalDeces={totalDeces} date={time}/> : null} {/* A MONTRER A EMILY */}\n          </div>\n          <div className='buttons'>\n            <div className=\"conrad\">\n              <button className=\"bouts\" onClick={imageHandler}>{langueProtection}</button>\n              <button className=\"bouts\" onClick={casHandler}>{langueCas}</button>\n              <button className=\"bouts\" onClick={aboutHandler}>{langueInfo}</button>\n            </div>\n            <button onClick={frenchHandler}>Francais</button>\n            <button onClick={englishHandler}>English</button>\n          </div>\n\n        </div>) : <h1>Loading...</h1>}\n    </LanguageContext.Provider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}